/**
 * Gamer One API Documentation
 * Welcome to the Official Gamer One API documentation.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: developer@gamerone.gg
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

export interface User {
  /**
   * ID for the user.
   */
  id: number;
  /**
   * Email for the current user, null if the requester is not the owner of user
   */
  email: string | null;
  /**
   * First name for the user. Can be null based on privacy
   */
  firstName: string | null;
  /**
   * Last name for the user can be null based on privacy
   */
  lastName: string | null;
  /**
   * Location for the user
   */
  location: string | null;
  /**
   * Main and unique identifier for the user.
   */
  username: string;
  /**
   * File path for the user avatar object.
   */
  avatar: string;
  /**
   * File path for the cover object.
   */
  banner: string | null;
  /**
   * Date of birth for the user.
   */
  birthDate: string | null;
  /**
   * Status of the user.
   */
  status: string | null;
  /**
   * Total number of followers user has.
   */
  followerCount: number;
  /**
   * Total number of users that this user follows.
   */
  followCount: number;
  /**
   * Total number of badges earned.
   */
  badgeCount: number;
  /**
   * Total games added to the users profile
   */
  gameCount: number;
  /**
   * Total number of hours games played & logged to Gamer One.
   */
  playCount: number;
  /**
   * True if the request owner user is following this user.
   */
  isFollowing: boolean;
  /**
   * User bio information
   */
  bio: string | null;
  /**
   * User website 'http://site.com'
   */
  websiteUrl: string | null;
  /**
   * Indicates if the user is a pro gamer
   */
  isPro: boolean;
  /**
   * Indicates if the user is a pro streamer
   */
  isStreamer: boolean;
  /**
   * Indicates if the user is influencer
   */
  isInfluencer: boolean;
  /**
   * Describes the squad status. 0 if there is no squad relation, 1 if there is a pending invite and 2 if there is accepted squad invite
   */
  isSquad: UserSquadStatus;
}

export type UserSquadStatus = 0 | 1 | 2;

export enum UserSquadStatusEnum {
  NO_SQUAD,
  PENDING_INVITE,
  IN_SQUAD,
}
